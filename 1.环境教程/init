#!/usr/bin/env bash
# Name: react-redux-init
# Brief: Create ReactRedux SPA project. 
# Author: Rabbit


set -e


## variables

retrytimes="0"



## Utils

createDirectoryNotify() {
  echo -e "\033[0;33mCreate Directory \033[0m $1"
  mkdir $1
}

createFileNotify() {
  echo -e "\033[0;32mCreate File      \033[0m $1"
  echo -e "$2" > $1
}

title() {
  echo -e "\n    $1\n"
}

retry() {
  if [ $retrytimes -lt 5 ]; then
    if $@; then
      retrytimes="0"
    else
      retrytimes=$[$retrytimes + 1]
      title "Install failed, retry $retrytimes times"
      retry $@
    fi
  else
    exit 1
  fi
}



# Check nodejs.

title "Check commands."

if [ -x "$(command -v node)" ]; then
  echo "NODE version: $(node --version)"
else
  echo "Please install nodejs first."
  start "https://nodejs.org"
  exit 1
fi


# Check npm.

if [ -x "$(command -v npm)" ]; then
  echo "NPM  version: $(npm --version)"
else
  echo "Can't find npm, Make sure npm in your path."
  exit 1
fi


# Check yarn.

if [ -x "$(command -v yarn)" ]; then
  echo "YARN version: $(yarn --version)"
else
  npm i -g yarn 
fi


# Check target directory.

if [ -d "src" ];
then
  echo "Error: src directory already exists."
  exit 1
fi




## Make directories.

title "Write contents."

createDirectoryNotify dll
createDirectoryNotify src
createDirectoryNotify src/actions
createDirectoryNotify src/components
createDirectoryNotify src/containers
createDirectoryNotify src/middlewares
createDirectoryNotify src/reducers
createDirectoryNotify src/types
createDirectoryNotify src/styles
createDirectoryNotify src/routes
createDirectoryNotify src/utils
createDirectoryNotify src/store


## Create config files.


# Write editorconfig.
createFileNotify .editorconfig "\
root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true
indent_style = space
indent_size = 2

[{.babelrc, .eslintrc, .stylelintrc}]
indent_size = 4

[*.{json,yml,raml}]
indent_size = 4
"


# Write .babelrc.
createFileNotify .babelrc "\
{
  \"presets\": [[\"es2015\", { \"modules\": false }], \"stage-2\", \"react\"],
  \"plugins\": [\"lodash\"]
}
"


# Write postcss.config.js
createFileNotify postcss.config.js "\
module.exports = {
  plugins: [
    require('postcss-short')(),
    require('postcss-nesting')(),
    require('postcss-mixins')(),
    require('postcss-color-function')()
  ]
}
"


# Write webpack.config.js
createFileNotify  webpack.config.js "\
const webpack             = require('webpack')
const path                = require('path')
const ExtractTextPlugin   = require('extract-text-webpack-plugin')
const HtmlWebpackPlugin   = require('html-webpack-plugin')
const HtmlWebpackTemplate = require('html-webpack-template')

const ExtractCSSPlugin = new ExtractTextPlugin({
  filename: '[name].css',
  allChunks: true,
  disable: process.env.NODE_ENV === 'development'
})

module.exports = {
  entry: { 
	  app: [ 
	    'react-hot-loader/patch',
	    'webpack-dev-server/client',
	    'webpack/hot/only-dev-server',
	    './src/index.js'
	  ] 
  },
  output: {
	  publicPath: '/',
	  filename: '[name].js',
	  path: '/'
  },
  module: {
	  rules: [{
		  test: /\.jsx?$/,
		  use: 'babel-loader'
	  },{
	    test: /\.css$/,
	    use: ExtractCSSPlugin.extract({
		    fallback: 'style-loader',
		    use: [{
		      loader: 'css-loader',
		      options: {
			      modules: true,
			      importLoaders: 1,
			      camelCase: true,
			      sourceMap: true,
			      minimize: false
		      }
		    },{
		      loader: 'postcss-loader',
		      options: {
			      sourceMap: 'inline',
		      }
		    }]
	    })
	  }]
  },
  resolve: {
	  extensions: [ '.js', '.json', '.jsx', '.css', '.svg', '.png' ]
  },
  devtool: 'cheap-module-eval-source-map',
  plugins: [
	  new webpack.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development')
	  }),
	  new HtmlWebpackPlugin({
      template: HtmlWebpackTemplate,
      inject: false,
      scripts: [
        '/dll/vendor.js'
      ]
	  }),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NamedModulesPlugin(),
	  ExtractCSSPlugin,
    new webpack.DllReferencePlugin({
      context:  '.',                                 
      manifest: path.resolve(__dirname, 'dll/vendor-manifest.json'), 
    })                                               
  ],
  devServer: {
	  compress: true,
	  historyApiFallback: true,
	  hot: true,
	  port: 9000
  }
}
"


# Write webpack.config.js
createFileNotify  webpack.config.dll.js "\
const webpack = require('webpack')
const path    = require('path')

module.exports = {
  entry: {
    vendor: [
      'react',
      'react-dom',
      'react-redux',
      'react-router',
      'react-router-redux',
      'redux',
      'redux-thunk',
      'lodash',
      'react-hot-loader/patch',
      'react-hot-loader',
      'webpack-dev-server/client'
    ]
  },
  output: {
    path: path.resolve(__dirname, 'dll'),
    filename: '[name].js',
    library: '[name]'
  },
  plugins: [
    new webpack.DllPlugin({
      path: path.resolve(__dirname, 'dll/[name]-manifest.json'),
      name: '[name]'
    })
  ]
}
"


# Write package.json
createFileNotify package.json "\
{
  \"name\": \"webpackApp\",
  \"version\": \"1.0.0\",
  \"description\": \"\",
  \"main\": \"src/index.js\",
  \"scripts\": {
    \"start\": \"cross-env NODE_ENV=development node_modules/.bin/webpack-dev-server\",
    \"build:dll\": \"cross-env NODE_ENV=development node_modules/.bin/webpack --config webpack.config.dll.js\"
  },
  \"author\": \"$(git config --get user.name) <$(git config --get user.email)>\",
  \"license\": \"MIT\"
}
"


# Write src/index.js 
createFileNotify src/index.js "\
import React      from 'react' 
import { render } from 'react-dom' 
import Root       from './boot'

const node = document.createElement('div')
node.id = 'app'
document.body.appendChild(node)

function main() {   
  if(process.env.NODE_ENV === 'development') {     
    const AppContainer = require('react-hot-loader').AppContainer     
    render(<AppContainer><Root /></AppContainer>, node)   
  } else {
    render(<Root />, node)   
  } 
}

if(process.env.NODE_ENV === 'development' && module.hot) {   
  module.hot.accept('./boot', main) 
}

main()
"


# Write src/boot.js 
createFileNotify src/boot.js "\
import React                      from 'react' 
import { Provider }               from 'react-redux'
import { Router, browserHistory } from 'react-router'
import { syncHistoryWithStore }   from 'react-router-redux'
import store                      from './store' 
import routes                     from './routes' 
import 'normalize.css/normalize.css' 
import './styles'

const history = syncHistoryWithStore(browserHistory, store)

export default function Boot() {   
  return (     
    <Provider store={store}>
      <Router history={history} routes={routes} />     
    </Provider>   
  ) 
}
"


## Routes.


# Write src/routes/index.js 
createFileNotify src/routes/index.js "\
import App     from '../containers/App'
import example from './example'

export default {
  path: '/',
  component: App,
  indexRoute: example
}
"


# Write src/routes/example.js 
createFileNotify src/routes/example.js "\
import Example from '../containers/Example'

export default {
  component: Example
}
"



## Store.

# Write src/store/store.dev.js
createFileNotify src/store/store.dev.js "\
import { createStore, compose } from 'redux'
import reducers                 from '../reducers'
import middlewares              from '../middlewares'

const composeEnhancers = process.env.NODE_ENV !== 'production' 
  && typeof window === 'object' 
  && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ 
  ?  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) 
  :  compose

const enhancer = composeEnhancers(middlewares)

export default createStore(reducers, enhancer)
"


# Write src/store/store.prod.js
createFileNotify src/store/store.prod.js "\
import { createStore } from 'redux'
import reducers        from '../reducers'
import middlewares     from '../middlewares'

export default createStore(reducers, middlewares)
"



# Write src/store/index.js
createFileNotify src/store/index.js "\
export default process.env.NODE_ENV === 'production' 
  ? require('./store.prod').default 
  : require('./store.dev').default
"



## Middlewares

# Write src/middlewares/index.js
createFileNotify src/middlewares/index.js "\
import { applyMiddleware } from 'redux'
import thunkMiddleware     from 'redux-thunk'

export default applyMiddleware(
  thunkMiddleware
)
"



## Reducers

# Write src/reducers/index.js
createFileNotify src/reducers/index.js "\
import { combineReducers } from 'redux'
import { routerReducer }   from 'react-router-redux'
import example             from './example'

export default combineReducers({
  routing: routerReducer,
  example
})
" 


# Write src/reducers/example.js
createFileNotify src/reducers/example.js "\
import * as ActionType from '../types/example'

export const initState = {
  value: 1,
  min: 0,
  max: 9
}

export default function reducer(state = initState, { type, payload }) {
  switch(type) {
    case ActionType.COUNTER_INC:
      return {
        ...state,
        value: Math.min(state.max, state.value + 1)
      }

    case ActionType.COUNTER_DEC:
      return {
        ...state,
        value: Math.max(state.min, state.value - 1)
      }

    default:
      return state
  }
}
"


## Types

# Write src/types/example.js
createFileNotify src/types/example.js "\
export const COUNTER_INC = 'COUNTER_INC'
export const COUNTER_DEC = 'COUNTER_DEC'
"


## Actions

# Write src/actions/example.js
createFileNotify src/actions/example.js "\
import * as ActionType from '../types/example'

export function counterInc() {
  return {
    type: ActionType.COUNTER_INC
  }
}

export function counterDec() {
  return {
    type: ActionType.COUNTER_DEC
  }
}
"


## Containers

# src/containers/App.js
createFileNotify src/containers/App.js "\
import React from 'react'

export function App({ children }) {
  return (
    <div id=\"appContainer\">
      {children}
    </div>
  )
}

export default App
"


# Write src/containers/Example.js
createFileNotify src/containers/Example.js "\
import React       from 'react'
import { compose } from 'redux'
import { connect } from 'react-redux'
import Counter     from '../components/Counter'
import style       from '../styles/example'
import * as action from '../actions/example'

export function Example({ value, inc, dec }) {
  return (
    <div className={style.container}>
      <Counter value={value} 
               inc={inc}
               dec={dec} 
      />
    </div>
  )
}

function mapStateToProps(state) {
  return {
    value: state.example.value
  }
}

function mapDispatchToProps(dispatch) {
  return {
    inc: compose(dispatch, action.counterInc),
    dec: compose(dispatch, action.counterDec)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(Example)
" 




## Components

# src/components/Counter.js
createFileNotify src/components/Counter.js "\
import React from 'react'
import style from '../styles/counter'

export default function Counter({ value, inc, dec }) {
  return (
    <div className={style.container}>
      <div className={style.textView}>
        <div className={style.text}>{value}</div>
      </div>
      
      <div className={style.btnsView}>
        <button type=\"button\" className={style.btn} onClick={dec}>-</button>
        <button type=\"button\" className={style.btn} onClick={inc}>+</button>
      </div>
    </div>
  )
}
"



# Write src/styles/index.css
createFileNotify src/styles/index.css "\
@value fontFamily: \"Helvetica Neue\",Helvetica,\"PingFang SC\",\"Hiragino Sans GB\",\"Microsoft YaHei\",\"微软雅黑\",Arial,sans-serif;
@value baseFontSize:       16px;
@value baseLineHeight:     1.58;
@value baseColor:          #363636;
@value baseBackgroudColor: #F1F5F8;
@value uiFontSize:         14px;
@value uiLineHeight:       1.5;

html,
body,
:global(#app) {
  height: 100%;
  overflow: hidden;
}

html {
  font-weight: normal;
  font-style:  normal;
  font-family: fontFamily;
  font-size:   baseFontSize;
}

body {
  font-size:   100%;
  line-height: baseLineHeight;
  color:       baseColor baseBackgroudColor;
}

button,
input,
select,
textarea {
  box-sizing:  border-box;
  font-family: fontFamily;
  font-weight: normal;
  font-style:  normal;
  font-size:   uiFontSize;
  line-height: uiLineHeight;

  &:focus {
    outline: 0;
  }

  &[disabled] {
    cursor: not-allowed;
  }
}

a {
  color: inherit;
  text-decoration: none;
}

:root {
  --primaryColor:   #88C9F6;
}
"


# Write src/styles/example.css
createFileNotify src/styles/example.css "\
.container {
  display: flex;
  justify-content: center;
  padding: 3rem;
}
"


# Write src/styles/counter.css
createFileNotify src/styles/counter.css "\
.container {
  display: flex;
  justify-content: center;
  flex-flow: column;
}

.textView {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
}


.btnsView {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
}

.text {
  font-size: 2rem;
}

.btn {
  border: 0;
  margin: 0 0.25rem;
  padding: 0.25rem 0.8rem;
  border-radius: 4px;
  
  color: var(--primaryColor) #FFFFFF;
  cursor: pointer;
}
"



title "Done. Install node modules."

userregistry="$(npm config get registry)"
npmregistry="https://registry.npm.org/"
taobaoregistry="https://registry.npm.taobao.org"


if [ $userregistry == $npmregistry ]; then
  npm config set registry $taobaoregistry
  yarn config set registry $taobaoregistry
fi

if ! [ -x "$(command -v cross-env)" ]; then
   retry "yarn global add --verbose cross-env"
fi

retry "yarn add --registry https://registry.npm.taobao.org --verbose \
     react react-dom react-redux react-router react-router-redux redux redux-thunk normalize.css"


retry "yarn add --dev --registry https://registry.npm.taobao.org --verbose \
     webpack@^2.2.1 webpack-dev-server react-hot-loader@^3.0.0-beta.6 \
     babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-2 \
     css-loader style-loader extract-text-webpack-plugin@^2.0.0-rc.3 \
     postcss-loader postcss-short postcss-color-function postcss-mixins postcss-nesting \
     file-loader \
     html-loader html-webpack-plugin html-webpack-template \
     babel-plugin-lodash lodash lodash-webpack-plugin \
     jest babel-jest \
     redux-mock-store \
     uglify-js uglifyjs-webpack-plugin"


title "Done. Start server."

if [ $userregistry == $npmregistry ]; then
  npm config set registry $npmregistry
  yarn config set registry $npmregistry
fi

yarn build:dll && yarn start && start "http://localhost:9000"
